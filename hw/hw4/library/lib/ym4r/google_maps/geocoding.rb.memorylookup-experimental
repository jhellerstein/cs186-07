require 'ym4r/google_maps/api_key'
require 'open-uri'
require 'rexml/document'

module Ym4r
  module GoogleMaps
    module Geocoding

      GEO_SUCCESS = 200
      GEO_MISSING_ADDRESS = 601
      GEO_UNKNOWN_ADDRESS = 602
      GEO_UNAVAILABLE_ADDRESS = 603
      GEO_BAD_KEY = 610
      GEO_TOO_MANY_QUERIES = 620
      GEO_SERVER_ERROR = 500

      # inaccurate coordinates do not work: acos function has restricted domain
      BIG_BAD_HASH = {
        "Madras" => [13,80],
        "New York" => [40,-73],
        "Paris" => [48,2],
        "Seoul" => [37,126],
        "Athens" => [37,23],
        "Rome" => [41,12]
      }

      # this hash does work
      BIG_HASH = { 
"Madras" => [13.060416,80.249634],
"New York" => [40.757929,-73.985506],
"Paris" => [48.856558,2.350966],
"Seoul" => [37.532308,126.95744],
"Athens" => [37.97918,23.716647],
"Chicago" => [41.879535,-87.624333],
"Rome" => [41.895466,12.482324],
"Berlin" => [52.52348,13.411494],
"California" => [37.269175,-119.306607],
"Boston" => [42.35888,-71.05682],
"L.A." => [ 34.053290, -118.245009 ],
"Berkeley" => [37.869505, -122.270499],
"San Francisco" => [37.779160, -122.420049],
      }
      
      #Gets placemarks by querying the Google Maps Geocoding service with the +request+ string
      def self.get(request)
        puts "**************** REQUEST " + request + " ************* "
        if BIG_HASH[request]
          placemarks = Placemarks.new(request,GEO_SUCCESS)
          placemarks << Geocoding::Placemark.new(request,
                                                 "", #data_country.text
                                                 "", #data_administrative.text
                                                 "", #data_sub_administrative.text
                                                 "", #data_locality.text
                                                 "", #data_dependent_locality.text
                                                 "", #data_thoroughfare.text
                                                 "", #data_postal_code.text
                                                 BIG_HASH[request][0],
                                                 BIG_HASH[request][1])
        else
          placemarks = Placemarks.new(request,GEO_UNKNOWN_ADDRESS)          
        end
        sleep 1
        placemarks
      end
      def self.getx(request,options = {})        
        url = "http://maps.google.com/maps/geo?q=#{request}&key=#{API_KEY}&output=xml"
        begin
          #xml = open(URI.encode(url)).read
        rescue
          raise ConnectionException.new("Unable to connect to Google Maps Geocoding service")
        end

        xml = File.open(File.dirname(__FILE__) + '/test_geocode_response.xml', 'r')
        
        doc = REXML::Document.new(xml) 
                        
        response = doc.elements['//Response']
        placemarks = Placemarks.new(response.elements['name'].text,response.elements['Status/code'].text.to_i)
        response.elements.each("Placemark") do |placemark|
          data = placemark.elements
          data_country = data['descendant::CountryNameCode']
          data_administrative = data['descendant::AdministrativeAreaName']
          data_sub_administrative = data['descendant::SubAdministrativeAreaName']
          data_locality = data['descendant::LocalityName']
          data_dependent_locality = data['descendant::DependentLocalityName']
          data_thoroughfare = data['descendant::ThoroughfareName']
          data_postal_code = data['descendant::PostalCodeNumber']
          placemarks << Geocoding::Placemark.new(data['address'].text,
                                                 data_country.nil? ? "" : data_country.text,
                                                 data_administrative.nil? ? "" : data_administrative.text,
                                                 data_sub_administrative.nil? ? "" : data_sub_administrative.text,
                                                 data_locality.nil? ? "" : data_locality.text,
                                                 data_dependent_locality.nil? ? "" : data_dependent_locality.text,
                                                 data_thoroughfare.nil? ? "" : data_thoroughfare.text,
                                                 data_postal_code.nil? ? "" : data_postal_code.text,
                                                 *(data['descendant::coordinates'].text.split(",")[0..1].collect {|l| l.to_f }))
        end
        placemarks
      end

      #Group of placemarks returned by the Geocoding service. If the result is valid the +statius+ attribute should be equal to <tt>Geocoding::GEI_SUCCESS</tt>
      class Placemarks < Array
        attr_accessor :name,:status

        def initialize(name,status)
          super(0)
          @name = name
          @status = status
        end
      end

      #A result from the Geocoding service.
      class Placemark < Struct.new(:address,:country_code,:administrative_area,:sub_administrative_area,:locality,:dependent_locality,:thoroughfare,:postal_code,:longitude,:latitude)
        def lonlat
          [longitude,latitude]
        end

        def latlon
          [latitude,longitude]
        end
      end
    
      #Raised when the connection to the service is not possible
      class ConnectionException < StandardError
      end
    end
  end
end
